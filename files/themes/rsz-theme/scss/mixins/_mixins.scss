@mixin tab-focus() {
  // Default
  outline: thin dotted;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Add a icon font before an element
@mixin icon-before($icon, $color:false, $display: 'flex') {
  display: $display;
  flex-wrap: nowrap;
  &:before {
    font-family: $icon-font-name !important;
    padding-right: .75rem;
    content: $icon;
    @if $color {
      color: $color;
    }
  }

}
// Add a icon font before an element
@mixin icon-after($icon, $color:false, $display: 'flex') {
  display: $display;
  flex-wrap: nowrap;
  &:after {
    font-family: $icon-font-name !important;
    padding-left: .75rem;
    content: $icon;
    @if $color {
      color: $color;
    }
  }

}

// Add a icon font before an element
@mixin column-count($value, $gap: 1rem) {
  -webkit-column-count: $value; /* Chrome, Safari, Opera */
  -moz-column-count: $value; /* Firefox */
  column-count: $value;

  -webkit-column-gap: $gap; /* Chrome, Safari, Opera */
  -moz-column-gap: $gap; /* Firefox */
  column-gap: $gap;
}

@mixin flex-vertical-align-middle() {
  // Center vertical with flexbox
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -ms-flex-align: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  align-items: center;
}

@mixin transition($property, $mode: ease-in-out, $duration: 0.4s) {
  -webkit-transition: $property $mode $duration;
  -moz-transition: $property $mode $duration;
  -ms-transition: $property $mode $duration;
  -o-transition: $property $mode $duration;
  transition: $property $mode $duration;
}

@mixin opacity($value) {
  $ie-value: $value * 100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$ie-value+")";
  filter: alpha(opacity=$ie-value);
}

@mixin ease-in-out() {
  -webkit-transition: all 0.7s ease-in-out;
  -moz-transition: all 0.7s ease-in-out;
  -o-transition: all 0.7s ease-in-out;
  transition: all 0.7s ease-in-out;
}

// Functions
// function map-deep-get()
// function to get a value from a nested map, see _type.scss for usage
//
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// screen reader only
@mixin invisible {
  width: 0;
  height: 0;
  left: -1000px;
  top: -1000px;
  position: absolute;
  overflow: hidden;
  display: inline;
}
